// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2024 19:22:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    minutos
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module minutos_vlg_sample_tst(
	CLOCK,
	RESET,
	sampler_tx
);
input  CLOCK;
input  RESET;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or RESET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module minutos_vlg_check_tst (
	ADS,
	AUS,
	BDS,
	BUS,
	CDS,
	CUS,
	DDS,
	DUS,
	EDS,
	EUS,
	FDS,
	FUS,
	GDS,
	GUS,
	LED1S,
	sampler_rx
);
input  ADS;
input  AUS;
input  BDS;
input  BUS;
input  CDS;
input  CUS;
input  DDS;
input  DUS;
input  EDS;
input  EUS;
input  FDS;
input  FUS;
input  GDS;
input  GUS;
input  LED1S;
input sampler_rx;

reg  ADS_expected;
reg  AUS_expected;
reg  BDS_expected;
reg  BUS_expected;
reg  CDS_expected;
reg  CUS_expected;
reg  DDS_expected;
reg  DUS_expected;
reg  EDS_expected;
reg  EUS_expected;
reg  FDS_expected;
reg  FUS_expected;
reg  GDS_expected;
reg  GUS_expected;
reg  LED1S_expected;

reg  ADS_prev;
reg  AUS_prev;
reg  BDS_prev;
reg  BUS_prev;
reg  CDS_prev;
reg  CUS_prev;
reg  DDS_prev;
reg  DUS_prev;
reg  EDS_prev;
reg  EUS_prev;
reg  FDS_prev;
reg  FUS_prev;
reg  GDS_prev;
reg  GUS_prev;
reg  LED1S_prev;

reg  ADS_expected_prev;
reg  AUS_expected_prev;
reg  BDS_expected_prev;
reg  BUS_expected_prev;
reg  CDS_expected_prev;
reg  CUS_expected_prev;
reg  DDS_expected_prev;
reg  DUS_expected_prev;
reg  EDS_expected_prev;
reg  EUS_expected_prev;
reg  FDS_expected_prev;
reg  FUS_expected_prev;
reg  GDS_expected_prev;
reg  GUS_expected_prev;
reg  LED1S_expected_prev;

reg  last_ADS_exp;
reg  last_AUS_exp;
reg  last_BDS_exp;
reg  last_BUS_exp;
reg  last_CDS_exp;
reg  last_CUS_exp;
reg  last_DDS_exp;
reg  last_DUS_exp;
reg  last_EDS_exp;
reg  last_EUS_exp;
reg  last_FDS_exp;
reg  last_FUS_exp;
reg  last_GDS_exp;
reg  last_GUS_exp;
reg  last_LED1S_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADS_prev = ADS;
	AUS_prev = AUS;
	BDS_prev = BDS;
	BUS_prev = BUS;
	CDS_prev = CDS;
	CUS_prev = CUS;
	DDS_prev = DDS;
	DUS_prev = DUS;
	EDS_prev = EDS;
	EUS_prev = EUS;
	FDS_prev = FDS;
	FUS_prev = FUS;
	GDS_prev = GDS;
	GUS_prev = GUS;
	LED1S_prev = LED1S;
end

// update expected /o prevs

always @(trigger)
begin
	ADS_expected_prev = ADS_expected;
	AUS_expected_prev = AUS_expected;
	BDS_expected_prev = BDS_expected;
	BUS_expected_prev = BUS_expected;
	CDS_expected_prev = CDS_expected;
	CUS_expected_prev = CUS_expected;
	DDS_expected_prev = DDS_expected;
	DUS_expected_prev = DUS_expected;
	EDS_expected_prev = EDS_expected;
	EUS_expected_prev = EUS_expected;
	FDS_expected_prev = FDS_expected;
	FUS_expected_prev = FUS_expected;
	GDS_expected_prev = GDS_expected;
	GUS_expected_prev = GUS_expected;
	LED1S_expected_prev = LED1S_expected;
end



// expected ADS
initial
begin
	ADS_expected = 1'bX;
end 

// expected AUS
initial
begin
	AUS_expected = 1'bX;
end 

// expected BDS
initial
begin
	BDS_expected = 1'bX;
end 

// expected BUS
initial
begin
	BUS_expected = 1'bX;
end 

// expected CDS
initial
begin
	CDS_expected = 1'bX;
end 

// expected CUS
initial
begin
	CUS_expected = 1'bX;
end 

// expected DDS
initial
begin
	DDS_expected = 1'bX;
end 

// expected DUS
initial
begin
	DUS_expected = 1'bX;
end 

// expected EDS
initial
begin
	EDS_expected = 1'bX;
end 

// expected EUS
initial
begin
	EUS_expected = 1'bX;
end 

// expected FDS
initial
begin
	FDS_expected = 1'bX;
end 

// expected FUS
initial
begin
	FUS_expected = 1'bX;
end 

// expected GDS
initial
begin
	GDS_expected = 1'bX;
end 

// expected GUS
initial
begin
	GUS_expected = 1'bX;
end 

// expected LED1S
initial
begin
	LED1S_expected = 1'bX;
end 
// generate trigger
always @(ADS_expected or ADS or AUS_expected or AUS or BDS_expected or BDS or BUS_expected or BUS or CDS_expected or CDS or CUS_expected or CUS or DDS_expected or DDS or DUS_expected or DUS or EDS_expected or EDS or EUS_expected or EUS or FDS_expected or FDS or FUS_expected or FUS or GDS_expected or GDS or GUS_expected or GUS or LED1S_expected or LED1S)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADS = %b | expected AUS = %b | expected BDS = %b | expected BUS = %b | expected CDS = %b | expected CUS = %b | expected DDS = %b | expected DUS = %b | expected EDS = %b | expected EUS = %b | expected FDS = %b | expected FUS = %b | expected GDS = %b | expected GUS = %b | expected LED1S = %b | ",ADS_expected_prev,AUS_expected_prev,BDS_expected_prev,BUS_expected_prev,CDS_expected_prev,CUS_expected_prev,DDS_expected_prev,DUS_expected_prev,EDS_expected_prev,EUS_expected_prev,FDS_expected_prev,FUS_expected_prev,GDS_expected_prev,GUS_expected_prev,LED1S_expected_prev);
	$display("| real ADS = %b | real AUS = %b | real BDS = %b | real BUS = %b | real CDS = %b | real CUS = %b | real DDS = %b | real DUS = %b | real EDS = %b | real EUS = %b | real FDS = %b | real FUS = %b | real GDS = %b | real GUS = %b | real LED1S = %b | ",ADS_prev,AUS_prev,BDS_prev,BUS_prev,CDS_prev,CUS_prev,DDS_prev,DUS_prev,EDS_prev,EUS_prev,FDS_prev,FUS_prev,GDS_prev,GUS_prev,LED1S_prev);
`endif
	if (
		( ADS_expected_prev !== 1'bx ) && ( ADS_prev !== ADS_expected_prev )
		&& ((ADS_expected_prev !== last_ADS_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADS_expected_prev);
		$display ("     Real value = %b", ADS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADS_exp = ADS_expected_prev;
	end
	if (
		( AUS_expected_prev !== 1'bx ) && ( AUS_prev !== AUS_expected_prev )
		&& ((AUS_expected_prev !== last_AUS_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AUS_expected_prev);
		$display ("     Real value = %b", AUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AUS_exp = AUS_expected_prev;
	end
	if (
		( BDS_expected_prev !== 1'bx ) && ( BDS_prev !== BDS_expected_prev )
		&& ((BDS_expected_prev !== last_BDS_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BDS_expected_prev);
		$display ("     Real value = %b", BDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BDS_exp = BDS_expected_prev;
	end
	if (
		( BUS_expected_prev !== 1'bx ) && ( BUS_prev !== BUS_expected_prev )
		&& ((BUS_expected_prev !== last_BUS_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_expected_prev);
		$display ("     Real value = %b", BUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_exp = BUS_expected_prev;
	end
	if (
		( CDS_expected_prev !== 1'bx ) && ( CDS_prev !== CDS_expected_prev )
		&& ((CDS_expected_prev !== last_CDS_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CDS_expected_prev);
		$display ("     Real value = %b", CDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_CDS_exp = CDS_expected_prev;
	end
	if (
		( CUS_expected_prev !== 1'bx ) && ( CUS_prev !== CUS_expected_prev )
		&& ((CUS_expected_prev !== last_CUS_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CUS_expected_prev);
		$display ("     Real value = %b", CUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_CUS_exp = CUS_expected_prev;
	end
	if (
		( DDS_expected_prev !== 1'bx ) && ( DDS_prev !== DDS_expected_prev )
		&& ((DDS_expected_prev !== last_DDS_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DDS_expected_prev);
		$display ("     Real value = %b", DDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DDS_exp = DDS_expected_prev;
	end
	if (
		( DUS_expected_prev !== 1'bx ) && ( DUS_prev !== DUS_expected_prev )
		&& ((DUS_expected_prev !== last_DUS_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DUS_expected_prev);
		$display ("     Real value = %b", DUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DUS_exp = DUS_expected_prev;
	end
	if (
		( EDS_expected_prev !== 1'bx ) && ( EDS_prev !== EDS_expected_prev )
		&& ((EDS_expected_prev !== last_EDS_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EDS_expected_prev);
		$display ("     Real value = %b", EDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_EDS_exp = EDS_expected_prev;
	end
	if (
		( EUS_expected_prev !== 1'bx ) && ( EUS_prev !== EUS_expected_prev )
		&& ((EUS_expected_prev !== last_EUS_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EUS_expected_prev);
		$display ("     Real value = %b", EUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_EUS_exp = EUS_expected_prev;
	end
	if (
		( FDS_expected_prev !== 1'bx ) && ( FDS_prev !== FDS_expected_prev )
		&& ((FDS_expected_prev !== last_FDS_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FDS_expected_prev);
		$display ("     Real value = %b", FDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_FDS_exp = FDS_expected_prev;
	end
	if (
		( FUS_expected_prev !== 1'bx ) && ( FUS_prev !== FUS_expected_prev )
		&& ((FUS_expected_prev !== last_FUS_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FUS_expected_prev);
		$display ("     Real value = %b", FUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_FUS_exp = FUS_expected_prev;
	end
	if (
		( GDS_expected_prev !== 1'bx ) && ( GDS_prev !== GDS_expected_prev )
		&& ((GDS_expected_prev !== last_GDS_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GDS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GDS_expected_prev);
		$display ("     Real value = %b", GDS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_GDS_exp = GDS_expected_prev;
	end
	if (
		( GUS_expected_prev !== 1'bx ) && ( GUS_prev !== GUS_expected_prev )
		&& ((GUS_expected_prev !== last_GUS_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port GUS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", GUS_expected_prev);
		$display ("     Real value = %b", GUS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_GUS_exp = GUS_expected_prev;
	end
	if (
		( LED1S_expected_prev !== 1'bx ) && ( LED1S_prev !== LED1S_expected_prev )
		&& ((LED1S_expected_prev !== last_LED1S_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1S_expected_prev);
		$display ("     Real value = %b", LED1S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LED1S_exp = LED1S_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module minutos_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg RESET;
// wires                                               
wire ADS;
wire AUS;
wire BDS;
wire BUS;
wire CDS;
wire CUS;
wire DDS;
wire DUS;
wire EDS;
wire EUS;
wire FDS;
wire FUS;
wire GDS;
wire GUS;
wire LED1S;

wire sampler;                             

// assign statements (if any)                          
minutos i1 (
// port map - connection between master ports and signals/registers   
	.ADS(ADS),
	.AUS(AUS),
	.BDS(BDS),
	.BUS(BUS),
	.CDS(CDS),
	.CLOCK(CLOCK),
	.CUS(CUS),
	.DDS(DDS),
	.DUS(DUS),
	.EDS(EDS),
	.EUS(EUS),
	.FDS(FDS),
	.FUS(FUS),
	.GDS(GDS),
	.GUS(GUS),
	.LED1S(LED1S),
	.RESET(RESET)
);

// CLOCK
initial
begin
	repeat(60)
	begin
		CLOCK = 1'b0;
		CLOCK = #8333 1'b1;
		# 8333;
	end
	CLOCK = 1'b0;
end 

// RESET
always
begin
	RESET = 1'b0;
	RESET = #500000 1'b1;
	#500000;
end 

minutos_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.RESET(RESET),
	.sampler_tx(sampler)
);

minutos_vlg_check_tst tb_out(
	.ADS(ADS),
	.AUS(AUS),
	.BDS(BDS),
	.BUS(BUS),
	.CDS(CDS),
	.CUS(CUS),
	.DDS(DDS),
	.DUS(DUS),
	.EDS(EDS),
	.EUS(EUS),
	.FDS(FDS),
	.FUS(FUS),
	.GDS(GDS),
	.GUS(GUS),
	.LED1S(LED1S),
	.sampler_rx(sampler)
);
endmodule

